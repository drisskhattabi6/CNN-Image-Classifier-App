class CNN(nn.Module):
    def __init__(self, num_classes):
        super().__init__()
        self.feature_extractor = nn.Sequential(
            # Convolutional Block 1
            nn.Conv2d(3, 32, kernel_size=3, padding=1),
            nn.BatchNorm2d(32),  # Add Batch Normalization
            nn.ReLU(),           # Replace ELU with ReLU (more commonly used)
            nn.MaxPool2d(kernel_size=2),  # Down-sample
            
            # Convolutional Block 2
            nn.Conv2d(32, 64, kernel_size=3, padding=1),
            nn.BatchNorm2d(64),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2),
            
            # Convolutional Block 3
            nn.Conv2d(64, 128, kernel_size=3, padding=1),
            nn.BatchNorm2d(128),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2),
            
            # Dropout for regularization
            nn.Dropout(0.3),
            
            nn.Flatten(),
        )
        
        # Classifier
        self.classifier = nn.Sequential(
            nn.Linear(128 * 16 * 16, 256),  # Adjust based on input size
            nn.ReLU(),
            nn.Dropout(0.5),  # Additional regularization
            nn.Linear(256, num_classes),
        )

    def forward(self, x):
        x = self.feature_extractor(x)
        x = self.classifier(x)
        return x